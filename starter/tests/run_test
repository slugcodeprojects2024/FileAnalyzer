#!/usr/bin/env python3

# This file was primarily generated by ChatGPT
# https://chat.openai.com/share/76a63d97-634e-4d23-aef7-10a20eeb084e

import os
import subprocess
import sys

def find_arguments(test_dir):
    # Validate the test directory path
    if not os.path.isdir(test_dir):
        print("Error: Invalid test directory path.", file=sys.stderr)
        return []

    # Initialize a list to store unique argument names
    arguments = set()

    # Traverse the directory structure
    for root, dirs, files in os.walk(test_dir):
        for file in files:
            # Check if the file name starts with '--'
            if file.startswith('--'):
                # Add argument names to the list
                arguments.add(file)

    return sorted(list(arguments))

def run_test(file_analyzer_binary, test_dir, arg_name):
    # Validate the FileAnalyzer binary path
    if not os.path.isfile(file_analyzer_binary):
        print("Error: Invalid FileAnalyzer binary path.", file=sys.stderr)
        return

    # Validate the test directory path
    if not os.path.isdir(test_dir):
        print("Error: Invalid test directory path.", file=sys.stderr)
        return

    # Check if the argument name starts with '--'
    if arg_name is not None and not arg_name.startswith('--'):
        print("Error: Argument name should start with '--'.", file=sys.stderr)
        return

    # Set the flag to track if any test fails
    any_test_fail = False

    # Traverse the directory structure
    for root, dirs, files in os.walk(test_dir):
        for dir_name in dirs:
            # Construct the path to the argument file
            arg_file = os.path.join(root, dir_name, arg_name)

            # Check if the argument file exists
            if os.path.exists(arg_file):
                # Find the file to be analyzed inside the directory
                file_to_analyze = None
                for file in os.listdir(os.path.join(root, dir_name)):
                    if not file.startswith('--'):
                        file_to_analyze = os.path.join(root, dir_name, file)
                        break

                if file_to_analyze is None:
                    print(f"Error: No file to analyze found in {os.path.join(root, dir_name)}", file=sys.stderr)
                    continue

                # Execute FileAnalyzer with the argument and capture its output
                command = [file_analyzer_binary, file_to_analyze, arg_name]
                # Read the contents of the argument file
                with open(arg_file, 'r') as f:
                    expected_output = f.read().strip()

                passed_file_extension_error = False
                runtime_error = False
                try:
                    output = subprocess.check_output(command, universal_newlines=True, stderr=subprocess.STDOUT, errors='replace')
                except subprocess.CalledProcessError as e:
                    output = e.output
                    runtime_error = True

                expected_file_extension_error = expected_output.startswith('Unsupported file extension.')
                received_file_extension_error = output.startswith('Unsupported file extension.')
                passed_file_extension_error = expected_file_extension_error and received_file_extension_error

                # Compare the output with the contents of the argument file
                if passed_file_extension_error:
                    print(f"Passed: Test for {file_to_analyze} with argument {arg_name}")
                elif output.strip() == expected_output and not runtime_error:
                    print(f"Passed: Test for {file_to_analyze} with argument {arg_name}")
                else:
                    print(f"Error: Output for {file_to_analyze} with argument {arg_name} does not match expected.", file=sys.stderr)
                    print("Command:", ' '.join(command), file=sys.stdout)
                    print(f"Expected:\n{expected_output}", file=sys.stderr)
                    print(f"Received:\n{output.strip()}", file=sys.stderr)
                    any_test_fail = True

    # Return the flag indicating whether any test fails
    return any_test_fail

def main(file_analyzer_binary, test_dir, arg_name, all, list_args):
    if arg_name is None and not all and not list_args:
        print("Error: Argument name is required.", file=sys.stderr)
        sys.exit(1)

    if list_args:
        arguments = find_arguments(test_dir)
        for arg in arguments:
            print(arg)
    elif all:
        arguments = find_arguments(test_dir)
        any_test_fail = False
        for arg in arguments:
            if run_test(file_analyzer_binary, test_dir, arg):
                any_test_fail = True
        if any_test_fail:
            sys.exit(1)
    else:
        if run_test(file_analyzer_binary, test_dir, arg_name):
            sys.exit(1)

if __name__ == "__main__":
    # Check if correct number of arguments provided
    if len(sys.argv) not in (3, 4):
        print("Usage:", sys.argv[0], "<file_analyzer_binary> <test_dir> all", file=sys.stderr)
        print("Or:", sys.argv[0], "<file_analyzer_binary> <test_dir> <arg_name>", file=sys.stderr)
        print("Or:", sys.argv[0], "list <test_dir>", file=sys.stderr)
        sys.exit(1)

    file_analyzer_binary = None if sys.argv[1] == "list" else sys.argv[1]
    test_dir = sys.argv[2]

    list_args = (sys.argv[1] == "list")
    all = (len(sys.argv) == 4 and sys.argv[3] == "all")
    arg_name = None if list_args or all else sys.argv[3]

    main(file_analyzer_binary, test_dir, arg_name, all, list_args)
